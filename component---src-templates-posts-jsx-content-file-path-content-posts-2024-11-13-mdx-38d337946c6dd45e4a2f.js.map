{"version":3,"file":"component---src-templates-posts-jsx-content-file-path-content-posts-2024-11-13-mdx-38d337946c6dd45e4a2f.js","mappings":"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","sources":["webpack://gitBlog/./content/posts/2024-11-13.mdx","webpack://gitBlog/./src/templates/posts.jsx","webpack://gitBlog/./src/components/shortcodes.jsx","webpack://gitBlog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    hr: \"hr\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"React Query와 TypeScript\"), \"\\n\", React.createElement(_components.p, null, \"React Query는 정말 좋은 상태 관리 라이브러리입니다.\"), \"\\n\", React.createElement(_components.p, null, \"서버 데이터의 상태관리에 대해서는 Redux를 대체하기에 전혀 모자람이 없죠.\"), \"\\n\", React.createElement(_components.p, null, \"물론 출시된지 얼마되지 않는 여느 라이브러리들이 그렇듯,\"), \"\\n\", React.createElement(_components.p, null, \"관련 커뮤니티의 규모와 자료들은 아직 부족한 편입니다.\"), \"\\n\", React.createElement(_components.p, null, \"기본적으로 사용법이 쉬운편이라  문제 될 정도는 아니지만, \", React.createElement(_components.strong, null, \"TypeScript\"), \"와 함께하면 얘기가 좀 달라집니다.\"), \"\\n\", React.createElement(_components.p, null, \"모호한데다가 자료까지 부족하거든요.  with TypeScript는 언제나 공부가 좀 필요합니다.\"), \"\\n\", React.createElement(_components.p, null, \"실무에서 사용하면서 애매했던 점이나 좋은 사용법을 정리해봤습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"1. useQuery\"), \"\\n\", React.createElement(_components.p, null, \"React Query에서  통신을 위해 대표적으로 사용되는 Hook은 2가지 입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQuery는 데이터 조회를 위해 사용되고,\"), \"\\n\", React.createElement(_components.p, null, \"useMutation는 데이터를 생성 / 업데이트 / 삭제 할 때 사용됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"각 Hook의 Type과 사용법에 대해 알아보겠습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"export function useQuery<\\n  TQueryFnData = unknown,\\n  TError = unknown,\\n  TData = TQueryFnData,\\n  TQueryKey extends QueryKey = QueryKey\\n>\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TQueryFnData\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { data } = useQuery<AxiosResponse<결과타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"queryFuntion\"), \"의 실행 결과의 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"서버 통신 이후  \", React.createElement(_components.code, null, \"Promise\"), \"의 반환 타입이라고 생각하면 됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 axios를 이용해 서버에 API를 요청하고 있다면,\"), \"\\n\", React.createElement(_components.p, null, \"타입 지정은 \", React.createElement(_components.code, null, \"<AxiosResponse>\"), \"가 될 것 입니다.\"), \"\\n\", React.createElement(_components.p, null, \"물론 \", React.createElement(_components.code, null, \"<AxiosResponse<Type>>\"), \"의 형태로 반환 타입을 지정하는 것도 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"개인적으로는 타입을 제네릭으로 지정하여, 어느정도 형식을 유지하면서 반환 타입을 지정해주는 것이 좋다고 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 타입은 option인 \", React.createElement(_components.code, null, \"onSuccess\"), \"의 매개 변수인 \", React.createElement(_components.code, null, \"response\"), \"와,\"), \"\\n\", React.createElement(_components.p, null, \"반환 값인 \", React.createElement(_components.code, null, \"data\"), \"에서 사용하실 수 있습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TError\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { error } =\\nuseQuery<AxiosResponse<결과타입>, AxiosError<에러타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"오류 발생시 Error의 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"단순히 Error로 지정해도 무방하지만, status 같이 디테일한 데이터를 원한다면\"), \"\\n\", React.createElement(_components.p, null, \"통신 라이브러리가 제공하는 반환 타입을 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 axios를 이용해 서버에 API를 요청하고 있다면,\"), \"\\n\", React.createElement(_components.p, null, \"타입 지정은 \", React.createElement(_components.code, null, \"<AxiosError>\"), \"가 될 것 입니다.  \", React.createElement(_components.code, null, \"TQueryFnData\"), \"처럼 Error의 반환 타입을 지정하는 것도 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 타입은 option인 \", React.createElement(_components.code, null, \"onError\"), \"의 매개 변수인 \", React.createElement(_components.code, null, \"error\"), \"와,\"), \"\\n\", React.createElement(_components.p, null, \"반환 값인 \", React.createElement(_components.code, null, \"error\"), \"에서 사용하실 수 있습니다.\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TData\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { data } =\\nuseQuery<AxiosResponse<결과타입>, AxiosError<에러타입>, 반환타입>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"data의 \", React.createElement(_components.strong, null, \"실질적\"), \" 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"TQueryFnData\"), \"는 반환 직후의 타입이지만,\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"TData\"), \"는 반환 후 select option으로 가공 뒤의 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"다시말해  반환된 데이터를 가공하지않는다면,  타입은  \", React.createElement(_components.code, null, \"TQueryFnData\"), \"과 동일합니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TQueryKey\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"useQuery<AxiosResponse<결과타입>, AxiosError<에러타입>, 반환타입, 쿼리키타입>(\\n...\\n\\nuseQuery의 첫 번째 인자인,  `queryKey`의 타입을 명시적으로 지정해주는 제네릭 타입입니다.\\n\\nQuery Function의 매개변수로 반환 받는 `queryKey`의 타입에도 영향을 줍니다.\\n\\n뒤에서 좀 더 자세히 설명하겠지만, `queryKey`는 각 query의 구분을 위해 사용됩니다.\\n\\n대체로 지정되는 타입은 string, Array<string>과 Object입니다.\\n\\n`queryKey`는 계층구조이기 때문에 이를 활용하기 위해서  Array<string>로 사용하는게 좋지만,  하나의 객체를 key로 사용하는 것도 괜찮습니다.\\n\\n---\\n\\n설명을 바탕으로 작성한  TypeScript에서 useQuery의 기본적인 사용법은 다음과 같습니다.\\n\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"useQuery<AxiosResponse, AxiosError, AxiosResponse, string[]>(\\n\\t['keyName'], //queryKey\\n\\t(): Promise<any> => API() //queryFn\\n\\t{\\n\\t\\t\\toptions, //options\\n\\t},\\n),\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jh/Desktop/private-project/gitBlog/content/posts/2024-11-13.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {components} from \"../components/shortcodes\";\nconst PostsTemplate = ({data, children}) => {\n  return React.createElement(\"div\", {\n    className: 'flex flex-col items-center'\n  }, React.createElement(\"div\", {\n    className: \"max-w-[960px]\"\n  }, React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nPostsTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostsTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","import * as React from \"react\"\n\nconst Collapsible = ({ summary, children }) => {\n  return (\n    <details\n      style={{\n        backgroundColor: `#f2f2f2`,\n        padding: `1rem`,\n        borderRadius: `10px`,\n      }}\n    >\n      <summary\n        style={{\n          display: `list-item`,\n          fontWeight: 600,\n          cursor: `pointer`,\n          \">:firstOfType\": { display: `inline` },\n        }}\n      >\n        {summary}\n      </summary>\n      {children}\n    </details>\n  )\n}\n\nexport const components = {\n  Collapsible,\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","strong","h2","hr","pre","code","ol","li","_provideComponents","components","React","className","start","wrapper","MDXLayout","PostsTemplate","_ref","data","children","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref2","mdx","frontmatter","title","Collapsible","summary","style","backgroundColor","padding","borderRadius","display","fontWeight","cursor","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}