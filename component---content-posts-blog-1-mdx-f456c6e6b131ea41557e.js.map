{"version":3,"file":"component---content-posts-blog-1-mdx-f456c6e6b131ea41557e.js","mappings":"wMAiBA,MAXaA,IAEP,MADUA,EAGd,OACEC,EAAAA,cAAA,MAAIC,UAAW,cACZ,YACE,ECTF,MAAMC,EAAOA,KAClB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,MAAO,UACNC,EAAAA,EAAAA,OACH,OAAOP,EAAAA,cAAoBG,EAAYG,MAAO,KAAM,cAAc,EAEpE,SAASE,EAAkBC,GACzB,MAAMN,EAAcC,OAAOC,OAAO,CAChCK,EAAG,IACHC,MAAO,QACPC,MAAO,QACPC,GAAI,KACJC,GAAI,KACJC,MAAO,QACPC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHX,EAAAA,EAAAA,MAAsBE,EAAMU,YAC/B,OAAOnB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBG,EAAYO,EAAG,KAAM,mBAAoB,KAAMV,EAAAA,cAAoBG,EAAYO,EAAG,KAAM,kCAAmC,KAAMV,EAAAA,cAAoBG,EAAYQ,MAAO,KAAMX,EAAAA,cAAoBG,EAAYS,MAAO,KAAMZ,EAAAA,cAAoBG,EAAYU,GAAI,KAAMb,EAAAA,cAAoBG,EAAYW,GAAI,KAAM,SAAUd,EAAAA,cAAoBG,EAAYW,GAAI,KAAM,SAAUd,EAAAA,cAAoBG,EAAYW,IAAKd,EAAAA,cAAoBG,EAAYW,IAAKd,EAAAA,cAAoBG,EAAYW,MAAOd,EAAAA,cAAoBG,EAAYY,MAAO,KAAMf,EAAAA,cAAoBG,EAAYU,GAAI,KAAMb,EAAAA,cAAoBG,EAAYa,GAAI,KAAM,WAAYhB,EAAAA,cAAoBG,EAAYa,GAAI,KAAM,QAAShB,EAAAA,cAAoBG,EAAYa,IAAKhB,EAAAA,cAAoBG,EAAYa,IAAKhB,EAAAA,cAAoBG,EAAYa,OAAQ,KAAMhB,EAAAA,cAAoBG,EAAYc,GAAI,KAAM,qBAAsB,KAAMjB,EAAAA,cAAoBoB,GAAO,KAAMpB,EAAAA,cAAoBG,EAAYO,EAAG,KAAM,aAAc,KAAMV,EAAAA,cAAoBG,EAAYe,GAAI,KAAM,uBAAwB,KAAMlB,EAAAA,cAAoBG,EAAYO,EAAG,KAAM,kBAClnC,CAKA,MAJA,SAAoBD,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBE,EAAMU,YAC3E,OAAOG,EAAYtB,EAAAA,cAAoBsB,EAAWb,EAAOT,EAAAA,cAAoBQ,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCMO,MAAMc,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,CAGA,MAAMO,EAAc,CAAC,EAQd,SAASC,GAAY,WAACR,EAAU,SAAES,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfV,EACHA,EAAW,CAAC,GACZA,GAAcO,EAEJF,EAAiBL,GAG5B,gBACLI,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://git-blog/./src/components/test.tsx","webpack://git-blog/./content/posts/blog-1.mdx","webpack://git-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import React from \"react\"\n\nexport interface ITestProps {\n  //children?: React.ReactNode,\n}\n\nconst Test = (\n  {}: ITestProps\n) => {\n\n  return (\n    <h1 className={'bg-red-100'}>\n      {'Test Text'}\n    </h1>\n  )\n}\n\nexport default Test","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Test from \"../../src/components/test\";\nexport const Head = () => {\n  const _components = Object.assign({\n    title: \"title\"\n  }, _provideComponents());\n  return React.createElement(_components.title, null, \"Blog Post 1\");\n};\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Trying out MDX.\"), \"\\n\", React.createElement(_components.p, null, \"Some GFM features like tables:\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Hello\"), React.createElement(_components.th, null, \"World\"), React.createElement(_components.th), React.createElement(_components.th), React.createElement(_components.th))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"How are\"), React.createElement(_components.td, null, \"you?\"), React.createElement(_components.td), React.createElement(_components.td), React.createElement(_components.td)))), \"\\n\", React.createElement(_components.h2, null, \"Heading Level Two\"), \"\\n\", React.createElement(Test), \"\\n\", React.createElement(_components.p, null, \"Some text\"), \"\\n\", React.createElement(_components.h3, null, \"Heading Level Three\"), \"\\n\", React.createElement(_components.p, null, \"Some more text\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_ref","React","className","Head","_components","Object","assign","title","_provideComponents","_createMdxContent","props","p","table","thead","tr","th","tbody","td","h2","h3","components","Test","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}