"use strict";(self.webpackChunkgitBlog=self.webpackChunkgitBlog||[]).push([[913],{2580:function(e,n,t){t.r(n),t.d(n,{Head:function(){return m},default:function(){return s}});var l=t(1151),r=t(7294);function a(e){const n=Object.assign({h1:"h1",p:"p",strong:"strong",h2:"h2",hr:"hr",pre:"pre",code:"code",ol:"ol",li:"li"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.h1,null,"React Query와 TypeScript"),"\n",r.createElement(n.p,null,"React Query는 정말 좋은 상태 관리 라이브러리입니다."),"\n",r.createElement(n.p,null,"서버 데이터의 상태관리에 대해서는 Redux를 대체하기에 전혀 모자람이 없죠."),"\n",r.createElement(n.p,null,"물론 출시된지 얼마되지 않는 여느 라이브러리들이 그렇듯,"),"\n",r.createElement(n.p,null,"관련 커뮤니티의 규모와 자료들은 아직 부족한 편입니다."),"\n",r.createElement(n.p,null,"기본적으로 사용법이 쉬운편이라  문제 될 정도는 아니지만, ",r.createElement(n.strong,null,"TypeScript"),"와 함께하면 얘기가 좀 달라집니다."),"\n",r.createElement(n.p,null,"모호한데다가 자료까지 부족하거든요.  with TypeScript는 언제나 공부가 좀 필요합니다."),"\n",r.createElement(n.p,null,"실무에서 사용하면서 애매했던 점이나 좋은 사용법을 정리해봤습니다."),"\n",r.createElement(n.h2,null,"1. useQuery"),"\n",r.createElement(n.p,null,"React Query에서  통신을 위해 대표적으로 사용되는 Hook은 2가지 입니다."),"\n",r.createElement(n.p,null,"useQuery는 데이터 조회를 위해 사용되고,"),"\n",r.createElement(n.p,null,"useMutation는 데이터를 생성 / 업데이트 / 삭제 할 때 사용됩니다."),"\n",r.createElement(n.p,null,"각 Hook의 Type과 사용법에 대해 알아보겠습니다."),"\n",r.createElement(n.hr),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"export function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>\n")),"\n",r.createElement(n.ol,null,"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"TQueryFnData")),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"const { data } = useQuery<AxiosResponse<결과타입>>(\n...\n")),"\n",r.createElement(n.p,null,r.createElement(n.code,null,"queryFuntion"),"의 실행 결과의 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다."),"\n",r.createElement(n.p,null,"서버 통신 이후  ",r.createElement(n.code,null,"Promise"),"의 반환 타입이라고 생각하면 됩니다."),"\n",r.createElement(n.p,null,"예를 들어 axios를 이용해 서버에 API를 요청하고 있다면,"),"\n",r.createElement(n.p,null,"타입 지정은 ",r.createElement(n.code,null,"<AxiosResponse>"),"가 될 것 입니다."),"\n",r.createElement(n.p,null,"물론 ",r.createElement(n.code,null,"<AxiosResponse<Type>>"),"의 형태로 반환 타입을 지정하는 것도 가능합니다."),"\n",r.createElement(n.p,null,"개인적으로는 타입을 제네릭으로 지정하여, 어느정도 형식을 유지하면서 반환 타입을 지정해주는 것이 좋다고 생각합니다."),"\n",r.createElement(n.p,null,"해당 타입은 option인 ",r.createElement(n.code,null,"onSuccess"),"의 매개 변수인 ",r.createElement(n.code,null,"response"),"와,"),"\n",r.createElement(n.p,null,"반환 값인 ",r.createElement(n.code,null,"data"),"에서 사용하실 수 있습니다."),"\n",r.createElement(n.ol,null,"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"TError")),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"const { error } =\nuseQuery<AxiosResponse<결과타입>, AxiosError<에러타입>>(\n...\n")),"\n",r.createElement(n.p,null,"오류 발생시 Error의 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다."),"\n",r.createElement(n.p,null,"단순히 Error로 지정해도 무방하지만, status 같이 디테일한 데이터를 원한다면"),"\n",r.createElement(n.p,null,"통신 라이브러리가 제공하는 반환 타입을 사용하는 것이 좋습니다."),"\n",r.createElement(n.p,null,"예를 들어 axios를 이용해 서버에 API를 요청하고 있다면,"),"\n",r.createElement(n.p,null,"타입 지정은 ",r.createElement(n.code,null,"<AxiosError>"),"가 될 것 입니다.  ",r.createElement(n.code,null,"TQueryFnData"),"처럼 Error의 반환 타입을 지정하는 것도 가능합니다."),"\n",r.createElement(n.p,null,"해당 타입은 option인 ",r.createElement(n.code,null,"onError"),"의 매개 변수인 ",r.createElement(n.code,null,"error"),"와,"),"\n",r.createElement(n.p,null,"반환 값인 ",r.createElement(n.code,null,"error"),"에서 사용하실 수 있습니다."),"\n",r.createElement(n.ol,{start:"2"},"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"TData")),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"const { data } =\nuseQuery<AxiosResponse<결과타입>, AxiosError<에러타입>, 반환타입>(\n...\n")),"\n",r.createElement(n.p,null,"data의 ",r.createElement(n.strong,null,"실질적")," 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다."),"\n",r.createElement(n.p,null,r.createElement(n.code,null,"TQueryFnData"),"는 반환 직후의 타입이지만,"),"\n",r.createElement(n.p,null,r.createElement(n.code,null,"TData"),"는 반환 후 select option으로 가공 뒤의 타입입니다."),"\n",r.createElement(n.p,null,"다시말해  반환된 데이터를 가공하지않는다면,  타입은  ",r.createElement(n.code,null,"TQueryFnData"),"과 동일합니다."),"\n",r.createElement(n.ol,null,"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"TQueryKey")),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"useQuery<AxiosResponse<결과타입>, AxiosError<에러타입>, 반환타입, 쿼리키타입>(\n...\n\nuseQuery의 첫 번째 인자인,  `queryKey`의 타입을 명시적으로 지정해주는 제네릭 타입입니다.\n\nQuery Function의 매개변수로 반환 받는 `queryKey`의 타입에도 영향을 줍니다.\n\n뒤에서 좀 더 자세히 설명하겠지만, `queryKey`는 각 query의 구분을 위해 사용됩니다.\n\n대체로 지정되는 타입은 string, Array<string>과 Object입니다.\n\n`queryKey`는 계층구조이기 때문에 이를 활용하기 위해서  Array<string>로 사용하는게 좋지만,  하나의 객체를 key로 사용하는 것도 괜찮습니다.\n\n---\n\n설명을 바탕으로 작성한  TypeScript에서 useQuery의 기본적인 사용법은 다음과 같습니다.\n\n")),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"useQuery<AxiosResponse, AxiosError, AxiosResponse, string[]>(\n\t['keyName'], //queryKey\n\t(): Promise<any> => API() //queryFn\n\t{\n\t\t\toptions, //options\n\t},\n),\n")))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)},u=t(1228);const o=e=>{let{data:n,children:t}=e;return r.createElement("div",{className:"flex flex-col items-center"},r.createElement("div",{className:"max-w-[960px]"},r.createElement(l.Zo,{components:u.w},t)))};function s(e){return r.createElement(o,e,r.createElement(c,e))}const m=e=>{let{data:n}=e;return r.createElement("title",null,n.mdx.frontmatter.title)}},1228:function(e,n,t){t.d(n,{w:function(){return r}});var l=t(7294);const r={Collapsible:e=>{let{summary:n,children:t}=e;return l.createElement("details",{style:{backgroundColor:"#f2f2f2",padding:"1rem",borderRadius:"10px"}},l.createElement("summary",{style:{display:"list-item",fontWeight:600,cursor:"pointer",">:firstOfType":{display:"inline"}}},n),t)}}},1151:function(e,n,t){t.d(n,{Zo:function(){return u},ah:function(){return a}});var l=t(7294);const r=l.createContext({});function a(e){const n=l.useContext(r);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const c={};function u({components:e,children:n,disableParentContext:t}){let u;return u=t?"function"==typeof e?e({}):e||c:a(e),l.createElement(r.Provider,{value:u},n)}}}]);
//# sourceMappingURL=component---src-templates-posts-jsx-content-file-path-content-posts-2024-11-13-mdx-38d337946c6dd45e4a2f.js.map