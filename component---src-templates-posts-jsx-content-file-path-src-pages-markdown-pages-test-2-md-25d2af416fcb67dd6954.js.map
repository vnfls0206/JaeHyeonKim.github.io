{"version":3,"file":"component---src-templates-posts-jsx-content-file-path-src-pages-markdown-pages-test-2-md-25d2af416fcb67dd6954.js","mappings":"0IAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,eAClD,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,0ICPA,MAAMU,EAAgBC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAASF,EACrC,OAAOJ,EAAAA,cAAoB,MAAO,CAChCO,UAAW,mCACVP,EAAAA,cAAoB,MAAO,CAC5BO,UAAW,uBACVP,EAAAA,cAAoBQ,EAAAA,GAAa,CAClCT,WAAYA,EAAAA,GACXO,IAAW,EAGD,SAASG,EAAiBhB,GACvC,OAAOO,EAAAA,cAAoBG,EAAeV,EAAOO,EAAAA,cAAoBU,EAAAA,QAAqBjB,GAC5F,CACO,MAAMkB,EAAOC,IAAA,IAAC,KAACP,GAAKO,EAAA,OAAKZ,EAAAA,cAAoB,QAAS,KAAMK,EAAKQ,IAAIC,YAAYC,MAAM,C,qEChB9F,MAwBahB,EAAa,CACxBiB,YAzBkBZ,IAA4B,IAA3B,QAAEa,EAAO,SAAEX,GAAUF,EACxC,OACEJ,EAAAA,cAAA,WACEkB,MAAO,CACLC,gBAAgB,UAChBC,QAAQ,OACRC,aAAa,SAGfrB,EAAAA,cAAA,WACEkB,MAAO,CACLI,QAAQ,YACRC,WAAY,IACZC,OAAO,UACP,gBAAiB,CAAEF,QAAQ,YAG5BL,GAEFX,EACO,E,8FCWP,MAAMmB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiB3B,GAC/B,MAAM4B,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAf1B,EACFA,EAAW4B,GAGb,IAAIA,KAAsB5B,IAChC,CAAC4B,EAAmB5B,GACzB,CAGA,MAAM6B,EAAc,CAAC,EAQd,SAASpB,GAAY,WAACT,EAAU,SAAEO,EAAQ,qBAAEuB,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAf9B,EACHA,EAAW,CAAC,GACZA,GAAc6B,EAEJF,EAAiB3B,GAG5B,gBACL0B,EAAWM,SACX,CAACC,MAAOF,GACRxB,EAEJ,C","sources":["webpack://gitBlog/./src/pages/markdown-pages/test-2.md","webpack://gitBlog/./src/templates/posts.jsx","webpack://gitBlog/./src/components/shortcodes.jsx","webpack://gitBlog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"Hello World!\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jh/Desktop/private-project/gitBlog/src/pages/markdown-pages/test-2.md\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {components} from \"../components/shortcodes\";\nconst PostsTemplate = ({data, children}) => {\n  return React.createElement(\"div\", {\n    className: 'flex flex-col items-center pt-5'\n  }, React.createElement(\"div\", {\n    className: \"max-w-[960px] prose\"\n  }, React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nPostsTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostsTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","import * as React from \"react\"\n\nconst Collapsible = ({ summary, children }) => {\n  return (\n    <details\n      style={{\n        backgroundColor: `#f2f2f2`,\n        padding: `1rem`,\n        borderRadius: `10px`,\n      }}\n    >\n      <summary\n        style={{\n          display: `list-item`,\n          fontWeight: 600,\n          cursor: `pointer`,\n          \">:firstOfType\": { display: `inline` },\n        }}\n      >\n        {summary}\n      </summary>\n      {children}\n    </details>\n  )\n}\n\nexport const components = {\n  Collapsible,\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","PostsTemplate","_ref","data","children","className","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref2","mdx","frontmatter","title","Collapsible","summary","style","backgroundColor","padding","borderRadius","display","fontWeight","cursor","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}