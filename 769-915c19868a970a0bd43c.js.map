{"version":3,"file":"769-915c19868a970a0bd43c.js","mappings":"kMAUA,IAAIA,EAOW,SAASC,EAAqBC,GAC3C,MAAM,YACJC,EAAW,SACXC,GACEF,EACJ,OAAOC,GAAeH,GAAqB,SAAK,EAAAK,EAAe,CAC7DC,MAAON,EACPI,SAAUA,IACPA,CACP,CAfwB,iBAAbG,WACTP,GAAQ,OAAY,CAClBQ,IAAK,MACLC,SAAS,KCoCb,MApC0BC,IAIpB,IAHJ,SACEN,GACwBM,EAG1B,MAAOC,EAAOC,GAAYC,EAAAA,SAAe,QACnCC,EAAeD,EAAAA,cAAmC,CAAEF,QAAOC,aAmBjE,OATAG,EAAAA,EAAAA,YAAU,KARWJ,KACnB,MAAMK,EAAOC,OAAOV,SAASW,gBACvBC,EAAmB,SAAVR,EAEfK,EAAKI,UAAUC,OAAOF,EAAS,QAAU,QACzCH,EAAKI,UAAUE,IAAIX,EAAM,EAIzBY,CAAYZ,EAAM,GACjB,CAACA,IAQFE,EAAAA,cAACC,EAAaU,SAAQ,CAAClB,MAAO,CAAEK,QAAOC,aACrCC,EAAAA,cAACZ,EAAoB,CAACE,aAAW,GAC9BC,GAEmB,C","sources":["webpack://git-blog/./node_modules/@mui/styled-engine/StyledEngineProvider/StyledEngineProvider.js","webpack://git-blog/./src/app/TailwindContainer.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\n\n// prepend: true moves MUI styles to the top of the <head> so they're loaded first.\n// It allows developers to easily override MUI styles with other styling solutions, like CSS modules.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nlet cache;\nif (typeof document === 'object') {\n  cache = createCache({\n    key: 'css',\n    prepend: true\n  });\n}\nexport default function StyledEngineProvider(props) {\n  const {\n    injectFirst,\n    children\n  } = props;\n  return injectFirst && cache ? /*#__PURE__*/_jsx(CacheProvider, {\n    value: cache,\n    children: children\n  }) : children;\n}\nprocess.env.NODE_ENV !== \"production\" ? StyledEngineProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * By default, the styles are injected last in the <head> element of the page.\n   * As a result, they gain more specificity than any other style sheet.\n   * If you want to override MUI's styles, set this prop.\n   */\n  injectFirst: PropTypes.bool\n} : void 0;","import React, { useEffect } from \"react\"\nimport { StyledEngineProvider } from \"@mui/material/styles\"\nimport Layout from \"../components/layout/Layout\"\n\nexport interface IThemeContext {\n  theme: string,\n  setTheme: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport interface ITailwindContainerProps {\n  children?: React.ReactNode,\n}\n\n\nconst TailwindContainer = (\n  {\n    children\n  }: ITailwindContainerProps\n) => {\n\n  const [theme, setTheme] = React.useState(\"dark\")\n  const ThemeContext = React.createContext<IThemeContext>({ theme, setTheme })\n\n  const rawSetTheme = (theme: string) => {\n    const root = window.document.documentElement\n    const isDark = theme === \"dark\"\n\n    root.classList.remove(isDark ? \"light\" : \"dark\")\n    root.classList.add(theme)\n  }\n\n  useEffect(() => {\n    rawSetTheme(theme)\n  }, [theme]);\n\n  // const page  = useContext(pageContext);\n  //\n  // console.log(\"page \" + page)\n\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <StyledEngineProvider injectFirst>\n        {children}\n      </StyledEngineProvider>\n    </ThemeContext.Provider>\n  )\n\n}\n\nexport default TailwindContainer\n\n\n"],"names":["cache","StyledEngineProvider","props","injectFirst","children","C","value","document","key","prepend","_ref","theme","setTheme","React","ThemeContext","useEffect","root","window","documentElement","isDark","classList","remove","add","rawSetTheme","Provider"],"sourceRoot":""}