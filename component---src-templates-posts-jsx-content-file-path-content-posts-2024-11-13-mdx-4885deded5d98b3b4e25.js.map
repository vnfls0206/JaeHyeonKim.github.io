{"version":3,"file":"component---src-templates-posts-jsx-content-file-path-content-posts-2024-11-13-mdx-4885deded5d98b3b4e25.js","mappings":"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","sources":["webpack://gitBlog/./content/posts/2024-11-13.mdx","webpack://gitBlog/./src/templates/posts.jsx","webpack://gitBlog/./src/components/shortcodes.jsx","webpack://gitBlog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    hr: \"hr\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"React Query와 TypeScript\"), \"\\n\", React.createElement(_components.p, null, \"React Query는 정말 좋은 상태 관리 라이브러리입니다.\"), \"\\n\", React.createElement(_components.p, null, \"서버 데이터의 상태관리에 대해서는 Redux를 대체하기에 전혀 모자람이 없죠.\"), \"\\n\", React.createElement(_components.p, null, \"물론 출시된지 얼마되지 않는 여느 라이브러리들이 그렇듯,\"), \"\\n\", React.createElement(_components.p, null, \"관련 커뮤니티의 규모와 자료들은 아직 부족한 편입니다.\"), \"\\n\", React.createElement(_components.p, null, \"기본적으로 사용법이 쉬운편이라  문제 될 정도는 아니지만, \", React.createElement(_components.strong, null, \"TypeScript\"), \"와 함께하면 얘기가 좀 달라집니다.\"), \"\\n\", React.createElement(_components.p, null, \"모호한데다가 자료까지 부족하거든요.  with TypeScript는 언제나 공부가 좀 필요합니다.\"), \"\\n\", React.createElement(_components.p, null, \"실무에서 사용하면서 애매했던 점이나 좋은 사용법을 정리해봤습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"1. useQuery\"), \"\\n\", React.createElement(_components.p, null, \"React Query에서  통신을 위해 대표적으로 사용되는 Hook은 2가지 입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQuery는 데이터 조회를 위해 사용되고,\"), \"\\n\", React.createElement(_components.p, null, \"useMutation는 데이터를 생성 / 업데이트 / 삭제 할 때 사용됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"각 Hook의 Type과 사용법에 대해 알아보겠습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"(1) \", React.createElement(_components.strong, null, \"useQuery의 Type\")), \"\\n\", React.createElement(_components.p, null, \"useQuery의 \", React.createElement(_components.strong, null, \"제네릭\"), \" 타입은 다음과 같이 선언되었습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"export function useQuery<\\n  TQueryFnData = unknown,\\n  TError = unknown,\\n  TData = TQueryFnData,\\n  TQueryKey extends QueryKey = QueryKey\\n>\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TQueryFnData\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { data } = useQuery<AxiosResponse<결과타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"queryFuntion\"), \"의 실행 결과의 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"서버 통신 이후  \", React.createElement(_components.code, null, \"Promise\"), \"의 반환 타입이라고 생각하면 됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 axios를 이용해 서버에 API를 요청하고 있다면,\"), \"\\n\", React.createElement(_components.p, null, \"타입 지정은 \", React.createElement(_components.code, null, \"<AxiosResponse>\"), \"가 될 것 입니다.\"), \"\\n\", React.createElement(_components.p, null, \"물론 \", React.createElement(_components.code, null, \"<AxiosResponse<Type>>\"), \"의 형태로 반환 타입을 지정하는 것도 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"개인적으로는 타입을 제네릭으로 지정하여, 어느정도 형식을 유지하면서 반환 타입을 지정해주는 것이 좋다고 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 타입은 option인 \", React.createElement(_components.code, null, \"onSuccess\"), \"의 매개 변수인 \", React.createElement(_components.code, null, \"response\"), \"와,\"), \"\\n\", React.createElement(_components.p, null, \"반환 값인 \", React.createElement(_components.code, null, \"data\"), \"에서 사용하실 수 있습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"TError\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { error } =\\nuseQuery<AxiosResponse<결과타입>, AxiosError<에러타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"오류 발생시 Error의 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"단순히 Error로 지정해도 무방하지만, status 같이 디테일한 데이터를 원한다면\"), \"\\n\", React.createElement(_components.p, null, \"통신 라이브러리가 제공하는 반환 타입을 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 axios를 이용해 서버에 API를 요청하고 있다면,\"), \"\\n\", React.createElement(_components.p, null, \"타입 지정은 \", React.createElement(_components.code, null, \"<AxiosError>\"), \"가 될 것 입니다.  \", React.createElement(_components.code, null, \"TQueryFnData\"), \"처럼 Error의 반환 타입을 지정하는 것도 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 타입은 option인 \", React.createElement(_components.code, null, \"onError\"), \"의 매개 변수인 \", React.createElement(_components.code, null, \"error\"), \"와,\"), \"\\n\", React.createElement(_components.p, null, \"반환 값인 \", React.createElement(_components.code, null, \"error\"), \"에서 사용하실 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"TData\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { data } =\\nuseQuery<AxiosResponse<결과타입>, AxiosError<에러타입>, 반환타입>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"data의 \", React.createElement(_components.strong, null, \"실질적\"), \" 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"TQueryFnData\"), \"는 반환 직후의 타입이지만,\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"TData\"), \"는 반환 후 select option으로 가공 뒤의 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"다시말해  반환된 데이터를 가공하지않는다면,  타입은  \", React.createElement(_components.code, null, \"TQueryFnData\"), \"과 동일합니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TQueryKey\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"useQuery<AxiosResponse<결과타입>, AxiosError<에러타입>, 반환타입, 쿼리키타입>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"useQuery의 첫 번째 인자인,  \", React.createElement(_components.code, null, \"queryKey\"), \"의 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"Query Function의 매개변수로 반환 받는 \", React.createElement(_components.code, null, \"queryKey\"), \"의 타입에도 영향을 줍니다.\"), \"\\n\", React.createElement(_components.p, null, \"뒤에서 좀 더 자세히 설명하겠지만, \", React.createElement(_components.code, null, \"queryKey\"), \"는 각 query의 구분을 위해 사용됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"대체로 지정되는 타입은 \", React.createElement(_components.code, null, \"string\"), \", \", React.createElement(_components.code, null, \"Array<string>\"), \"과 Object입니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"queryKey\"), \"는 계층구조이기 때문에 이를 활용하기 위해서  \", React.createElement(_components.code, null, \"Array<string>\"), \"로 사용하는게 좋지만,  하나의 객체를 key로 사용하는 것도 괜찮습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"설명을 바탕으로 작성한  TypeScript에서 useQuery의 기본적인 사용법은 다음과 같습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"useQuery<AxiosResponse, AxiosError, AxiosResponse, string[]>(\\n\\t['keyName'], //queryKey\\n\\t(): Promise<any> => API() //queryFn\\n\\t{\\n\\t\\t\\toptions, //options\\n\\t}\\n)\\n\")), \"\\n\", React.createElement(_components.p, null, \"해당 형태로 사용해도 무방하지만, Hook이나 Service 형식으로 분리해서 사용하는 것이 깔끔합니다.\"), \"\\n\", React.createElement(_components.h3, null, \"(2) \", React.createElement(_components.strong, null, \"useQuery의 데이터 갱신\")), \"\\n\", React.createElement(_components.p, null, \"다음은 데이터 갱신입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQuery는 데이터 갱신의 방법도 다양하고 역할도 서로 달라 따로 설명할 필요성을 느꼈습니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQuery는 기본적으로 호출되는 순간, 한번 쿼리를 실행합니다.\"), \"\\n\", React.createElement(_components.p, null, \"다시 말해 데이터를 갱신하여 화면에 반영하기 위해서는 쿼리의 요청이 필요합니다.\"), \"\\n\", React.createElement(_components.p, null, \"방법은 크게 세가지로 나눠집니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"refetchInterval\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"...\\n\\t{\\n\\t\\t\\trefetchInterval: 500 //500ms마다 요청\\n\\n\\t}, //options\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"쿼리가 일정 주기마다 실행되도록하는 \", React.createElement(_components.code, null, \"refechInterval\"), \" 옵션을 사용합니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"setInterval\"), \"과 \", React.createElement(_components.code, null, \"refetch\"), \" 함수를 합쳐놓은 느낌이죠.\"), \"\\n\", React.createElement(_components.p, null, \"지속적인 요청과 갱신이 필요할 때 효과적입니다.\"), \"\\n\", React.createElement(_components.p, null, \"단점으로는 사용자가 임의로 갱신 시점을 조정할 수 없고,\"), \"\\n\", React.createElement(_components.p, null, \"계속해서 서버에 요청을 날리기에 효율적이지도 않습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"refetch\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const {refetch} =\\nuseQuery<AxiosResponse, AxiosError, AxiosResponse, string[]>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"일정 간격으로 update를 하지 않고 특정 사용자 액션에 대한 응답으로 쿼리 결과를 갱신합니다. 사용자가 원하는 타이밍에 갱신 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"단점으로는 데이터를 변형할 때 그것을 위한  코드가 선행되어야 합니다. 하지만  update 반영도 제대로되지 않을 뿐더러 코드가 아래와 같은 형태가 되어버려 보기에도 좋지 않습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"갱신();\\nrefetch();\\n\")), \"\\n\", React.createElement(_components.p, null, \"근본적으로 refetching 작업에 대해 명령형으로 실행하고자 하는건 잘못된 방법이기에,\"), \"\\n\", React.createElement(_components.p, null, \"다음에 나올 방법과 같이 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"uniqueKey\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const [queryString, setQueryString] = useState<string>('');\\n\\nuseQuery<AxiosResponse, AxiosError, AxiosResponse, string[]>(\\n\\t['keyName', queryString], //queryKey\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"앞서 말한대로 unique Key는 계층 구조입니다.\"), \"\\n\", React.createElement(_components.p, null, \"또한 useQuery는 Key가 변경 될 때 마다 트리거 되어 자동으로 \", React.createElement(_components.code, null, \"refetching\"), \"하기 때문에,\"), \"\\n\", React.createElement(_components.p, null, \"데이터를 변경하는 state를 key에 저장하기만 하면 됩니다. 모범적인 사용법이라 할 수 있죠.\"), \"\\n\", React.createElement(_components.p, null, \"그렇다곤 해도 데이터를 변형하지 않으면서 갱신해야 하는 경우도 있기 때문에,\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"refetch\"), \"와 같이 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.p, null, \"마지막으로 아까 말했듯 useQuery는 조회에 사용되는 경우가 많기 때문에,\"), \"\\n\", React.createElement(_components.p, null, \"대체로 queryString으로 queryKey를 구성하는 편입니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"결론\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"데이터가 변형되는 경우에는 uniqueKey에 등록해놓은 state를 변경하고,\"), \"\\n\", React.createElement(_components.p, null, \"변형되지 않는 경우에는 \", React.createElement(_components.code, null, \"refetch\"), \"를 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"2. useMutation\"), \"\\n\", React.createElement(_components.p, null, \"useMutation은 주로 추가/삭제/수정 요청에 주로 사용됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"물론 useQuery에는 무조건 get method를 사용하고\"), \"\\n\", React.createElement(_components.p, null, \"useMutation에는 post/put/delete method를 사용하는 것은 아니지만\"), \"\\n\", React.createElement(_components.p, null, \"대체로 useMutation은 bodyData를 필요로 할때가 많고,\"), \"\\n\", React.createElement(_components.p, null, \"반대로 queryString을 사용하는 경우가 적기 때문에,\"), \"\\n\", React.createElement(_components.p, null, \"그에 따른 타입과 사용법이 조금씩 다릅니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"(1) useMutaion\", React.createElement(_components.strong, null, \"의 Type\")), \"\\n\", React.createElement(_components.p, null, \"useMutaion의 타입은 아래와 같이 선언되어 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"export function useMutaion<\\n  TData = unknown,\\n  TError = unknown,\\n  TVariables = void,\\n  TContext = unknown\\n>\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TData\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { data } =\\nuseMutaion<AxiosResponse<결과타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"useMuation에 넘겨준 mutation 함수의  반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useMuation에는 TQueryFnData이 없기 때문에 TData가 실행 결과 타입이자, 실질적인 반환 타입이 되는 것이죠.\"), \"\\n\", React.createElement(_components.p, null, \"useQeury의 TQueryFuntion와 유사한 부분이 많기 때문에, 자세한 설명은 생략하겠습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TError\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { error } =\\nuseMutation<AxiosResponse<결과타입>, AxiosError<에러타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"useMutation에 넘겨준 mutation 함수의 에러 결과 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQeury의 TError와 유사한 부분이 많기 때문에 자세한 설명은 생략하겠습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TVariables\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { mutate } =\\nuseMutation<AxiosResponse<결과타입>, AxiosError<에러타입>, bodyType>(\\n...\\n\\t(bodyData: bodyType): Promise<any> => API(), //mutationFn\\n\\t{   //options\\n\\n\\t\\t\\tonSuccess: (res, bodyData: bodyType) => {},\\n\\t\\t  onError: (err, bodyData: bodyType) => {},\\n\\t\\t  onSettled: (res, err, bodyData: bodyType) => {},\\n\\t},\\n);\\n\\nmutate(bodyData);\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"mutate\"), \" 함수에 전달할 인자를 지정하는 generic 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"쉽게 말해 bodyData에 해당한다고 할 수 있죠.\"), \"\\n\", React.createElement(_components.p, null, \"해당 타입은 \", React.createElement(_components.code, null, \"mutate\"), \"와 Callback 함수인, \", React.createElement(_components.code, null, \"onSuccess\"), \", \", React.createElement(_components.code, null, \"onError\"), \"의 두번째 인자\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"onSettled\"), \"의 세번째 인자로 사용 할 수 있습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"TContext\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { mutate } =\\nuseMutation<AxiosResponse, AxiosError, bodyType, callbackType>(\\n...\\n\\t{   //options\\n\\n\\t\\t\\tonMutate: bodyData => something(bodyData),   //callbackType\\n\\n\\t\\t\\tonSuccess: (res, bodyData, callbackType) => {},\\n\\t\\t  onError: (err, bodyData, callbackType) => {},\\n\\t\\t  onSettled: (res, err, bodyData, callbackType) => {},\\n\\t},\\n);\\n\")), \"\\n\", React.createElement(_components.p, null, \"TContext는 앞서 말했던 callback 함수들의 마지막 인자의 타입이자,\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"onMutate\"), \"의 결과 값의 타입을 지정하는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"솔직히 해당 타입은 저도 제대로 사용해본 적이 적어 어떤 용도로 사용되는지는 정확히 알지 못합니다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"설명을 바탕으로 작성한  TypeScript에서 useMutation의 기본적인 사용법은 다음과 같습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"useMutation<AxiosResponse, AxiosError, bodyType, callbackType>(\\n\\t['keyName'], //mutationKey\\n\\t(bodyData: bodyType): Promise<any> => API() //mutationFn\\n\\t{\\n\\t\\t\\tonMutate: bodyData => something(bodyData),   //callbackType\\n\\n\\t\\t\\tonSuccess: (res, bodyData, callbackType) => {},\\n\\t\\t  onError: (err, bodyData, callbackType) => {},\\n\\t\\t  onSettled: (res, err, bodyData, callbackType) => {},\\n\\t}, //options\\n),\\n\")), \"\\n\", React.createElement(_components.p, null, \"또한 데이터 갱신에 대해 첨언하자면 useMutation도 마찬가지로 queryKey를 통한 데이터 갱신이 가능하지만,\"), \"\\n\", React.createElement(_components.p, null, \"기본적으로  mutate를 통해 쿼리를 호출하는 것이 바람직 하다고 볼 수 있습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"3.  Axios + ReactQuery + TypeScript의 JWT 토큰 관리\"), \"\\n\", React.createElement(_components.p, null, \"다른 상태관리 라이브러리에서 React Query로 넘어오신 분들은 JWT 토큰을 관리할 때 대체로 Axios가 제공하는 interceptors를 활용하였을 것입니다.\"), \"\\n\", React.createElement(_components.p, null, \"대략적인 형태는 다음과 같습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"axiosInstance.interceptors.request.use(\\n    function (config) {\\n        const headers = {\\n            ...config.headers,\\n            Authorization: 'Bearer ' + accessToken,\\n        };\\n\\n        config.headers = headers;\\n        return config;\\n    },\\n);\\n\\naxiosInstance.interceptors.response.use(\\n    (response) => {\\n        return response;\\n    },\\n    async error => {\\n        const originalRequest = {...error.config, noRepeat: true};\\n\\n        if ( 인증오류 && error.config.noRepeat !== true) {\\n            await axiosReissue()\\n                .then(response) => {\\n                        if (response.status === 200) {\\n                            return axiosInstance(originalRequest);\\n                        }\\n                    }\\n                )\\n        }\\n\\n        return Promise.reject(error);\\n\\n    },\\n);\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"저는 조금 간단하게 쓴편이지만 구조는 비슷하리라 생각됩니다. 실제로 잘 작동하기도 하고요.\"), \"\\n\", React.createElement(_components.p, null, \"어쩌면 React Query에서도 문제없이는게 아닌가? 생각하실수도 있겠지만\"), \"\\n\", React.createElement(_components.p, null, \"React Query를 사용하시는 분들중 이전에 Redux를 사용하다 전환하신 분들이라면,\"), \"\\n\", React.createElement(_components.p, null, \"Axios가 제공하는\"), \"\\n\", React.createElement(_components.h2, null, \"결론\"), \"\\n\", React.createElement(_components.p, null, \"reat-query는 타입 지정을 통해서 꽤나 안정적으로 사용할 수 있었습니다.\"), \"\\n\", React.createElement(_components.p, null, \"타입 가드를 도입하기 보다는 이처럼 빡빡한 타입 지정을 해두는 것이,\"), \"\\n\", React.createElement(_components.p, null, \"더 비동기 상태들의 타입 안정성을 확보하는데 도움이 될 수 있지 않을까 싶네요\"), \"\\n\", React.createElement(_components.p, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"react-query에 typescript 적용하기 - 리액트 쿼리,타입스크립트\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://gusrb3164.github.io/web/2022/01/23/react-query-typescript/\"\n  }, \"https://gusrb3164.github.io/web/2022/01/23/react-query-typescript/\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"React Query Key 관리\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.zigae.com/react-query-key/\"\n  }, \"https://www.zigae.com/react-query-key/\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jh/Desktop/private-project/gitBlog/content/posts/2024-11-13.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {components} from \"../components/shortcodes\";\nconst PostsTemplate = ({data, children}) => {\n  return React.createElement(\"div\", {\n    className: 'flex flex-col items-center pt-5'\n  }, React.createElement(\"div\", {\n    className: \"max-w-[960px] prose\"\n  }, React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nPostsTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostsTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","import * as React from \"react\"\n\nconst Collapsible = ({ summary, children }) => {\n  return (\n    <details\n      style={{\n        backgroundColor: `#f2f2f2`,\n        padding: `1rem`,\n        borderRadius: `10px`,\n      }}\n    >\n      <summary\n        style={{\n          display: `list-item`,\n          fontWeight: 600,\n          cursor: `pointer`,\n          \">:firstOfType\": { display: `inline` },\n        }}\n      >\n        {summary}\n      </summary>\n      {children}\n    </details>\n  )\n}\n\nexport const components = {\n  Collapsible,\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","strong","h2","hr","h3","pre","code","ol","li","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","PostsTemplate","_ref","data","children","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref2","mdx","frontmatter","title","Collapsible","summary","style","backgroundColor","padding","borderRadius","display","fontWeight","cursor","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}