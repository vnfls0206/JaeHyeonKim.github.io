{"version":3,"file":"component---src-templates-posts-jsx-content-file-path-content-posts-2024-11-13-mdx-915ab3cd1d92bbdcd1f4.js","mappings":"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","sources":["webpack://gitBlog/./src/shared/components/post/PostImage.tsx","webpack://gitBlog/./content/posts/2024-11-13.mdx","webpack://gitBlog/./src/templates/posts.jsx"],"sourcesContent":["import React from \"react\"\nimport { withPrefix } from \"gatsby\"\n\nexport interface IPostImageProps {\n  //children?: React.ReactNode,\n  src: string,\n\n}\n\nconst PostImage = (\n  {\n    src\n  }: IPostImageProps\n) => {\n\n  return (\n    <img\n      alt={\"내부 이미지 경로 URL\"}\n      className={\"w-full\"}\n      src={withPrefix(src)}\n    />\n  )\n}\n\nexport default PostImage","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport PostImage from \"../../src/shared/components/post/PostImage\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    hr: \"hr\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"React Query와 TypeScript\"), \"\\n\", React.createElement(PostImage, {\n    src: \"/image/post/2024-11-13/title.png\"\n  }), \"\\n\", React.createElement(_components.p, null, \"React Query는 정말 좋은 상태 관리 라이브러리입니다.\"), \"\\n\", React.createElement(_components.p, null, \"서버 데이터의 상태관리에 대해서는 Redux를 대체하기에 전혀 모자람이 없죠.\"), \"\\n\", React.createElement(_components.p, null, \"물론 출시된지 얼마되지 않는 여느 라이브러리들이 그렇듯,\"), \"\\n\", React.createElement(_components.p, null, \"관련 커뮤니티의 규모와 자료들은 아직 부족한 편입니다.\"), \"\\n\", React.createElement(_components.p, null, \"기본적으로 사용법이 쉬운편이라  문제 될 정도는 아니지만, \", React.createElement(_components.strong, null, \"TypeScript\"), \"와 함께하면 얘기가 좀 달라집니다.\"), \"\\n\", React.createElement(_components.p, null, \"모호한데다가 자료까지 부족하거든요.  with TypeScript는 언제나 공부가 좀 필요합니다.\"), \"\\n\", React.createElement(_components.p, null, \"실무에서 사용하면서 애매했던 점이나 좋은 사용법을 정리해봤습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"1. useQuery\"), \"\\n\", React.createElement(_components.p, null, \"React Query에서  통신을 위해 대표적으로 사용되는 Hook은 2가지 입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQuery는 데이터 조회를 위해 사용되고,\"), \"\\n\", React.createElement(_components.p, null, \"useMutation는 데이터를 생성 / 업데이트 / 삭제 할 때 사용됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"각 Hook의 Type과 사용법에 대해 알아보겠습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"(1) \", React.createElement(_components.strong, null, \"useQuery의 Type\")), \"\\n\", React.createElement(_components.p, null, \"useQuery의 \", React.createElement(_components.strong, null, \"제네릭\"), \" 타입은 다음과 같이 선언되었습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"export function useQuery<\\n  TQueryFnData = unknown,\\n  TError = unknown,\\n  TData = TQueryFnData,\\n  TQueryKey extends QueryKey = QueryKey\\n>\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TQueryFnData\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { data } = useQuery<AxiosResponse<결과타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"queryFuntion\"), \"의 실행 결과의 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"서버 통신 이후  \", React.createElement(_components.code, null, \"Promise\"), \"의 반환 타입이라고 생각하면 됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 axios를 이용해 서버에 API를 요청하고 있다면,\"), \"\\n\", React.createElement(_components.p, null, \"타입 지정은 \", React.createElement(_components.code, null, \"<AxiosResponse>\"), \"가 될 것 입니다.\"), \"\\n\", React.createElement(_components.p, null, \"물론 \", React.createElement(_components.code, null, \"<AxiosResponse<Type>>\"), \"의 형태로 반환 타입을 지정하는 것도 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"개인적으로는 타입을 제네릭으로 지정하여, 어느정도 형식을 유지하면서 반환 타입을 지정해주는 것이 좋다고 생각합니다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 타입은 option인 \", React.createElement(_components.code, null, \"onSuccess\"), \"의 매개 변수인 \", React.createElement(_components.code, null, \"response\"), \"와,\"), \"\\n\", React.createElement(_components.p, null, \"반환 값인 \", React.createElement(_components.code, null, \"data\"), \"에서 사용하실 수 있습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"TError\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { error } =\\nuseQuery<AxiosResponse<결과타입>, AxiosError<에러타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"오류 발생시 Error의 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"단순히 Error로 지정해도 무방하지만, status 같이 디테일한 데이터를 원한다면\"), \"\\n\", React.createElement(_components.p, null, \"통신 라이브러리가 제공하는 반환 타입을 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어 axios를 이용해 서버에 API를 요청하고 있다면,\"), \"\\n\", React.createElement(_components.p, null, \"타입 지정은 \", React.createElement(_components.code, null, \"<AxiosError>\"), \"가 될 것 입니다.  \", React.createElement(_components.code, null, \"TQueryFnData\"), \"처럼 Error의 반환 타입을 지정하는 것도 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 타입은 option인 \", React.createElement(_components.code, null, \"onError\"), \"의 매개 변수인 \", React.createElement(_components.code, null, \"error\"), \"와,\"), \"\\n\", React.createElement(_components.p, null, \"반환 값인 \", React.createElement(_components.code, null, \"error\"), \"에서 사용하실 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"TData\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { data } =\\nuseQuery<AxiosResponse<결과타입>, AxiosError<에러타입>, 반환타입>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"data의 \", React.createElement(_components.strong, null, \"실질적\"), \" 반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"TQueryFnData\"), \"는 반환 직후의 타입이지만,\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"TData\"), \"는 반환 후 select option으로 가공 뒤의 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"다시말해  반환된 데이터를 가공하지않는다면,  타입은  \", React.createElement(_components.code, null, \"TQueryFnData\"), \"과 동일합니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TQueryKey\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"useQuery<AxiosResponse<결과타입>, AxiosError<에러타입>, 반환타입, 쿼리키타입>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"useQuery의 첫 번째 인자인,  \", React.createElement(_components.code, null, \"queryKey\"), \"의 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"Query Function의 매개변수로 반환 받는 \", React.createElement(_components.code, null, \"queryKey\"), \"의 타입에도 영향을 줍니다.\"), \"\\n\", React.createElement(_components.p, null, \"뒤에서 좀 더 자세히 설명하겠지만, \", React.createElement(_components.code, null, \"queryKey\"), \"는 각 query의 구분을 위해 사용됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"대체로 지정되는 타입은 \", React.createElement(_components.code, null, \"string\"), \", \", React.createElement(_components.code, null, \"Array<string>\"), \"과 Object입니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"queryKey\"), \"는 계층구조이기 때문에 이를 활용하기 위해서  \", React.createElement(_components.code, null, \"Array<string>\"), \"로 사용하는게 좋지만,  하나의 객체를 key로 사용하는 것도 괜찮습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"설명을 바탕으로 작성한  TypeScript에서 useQuery의 기본적인 사용법은 다음과 같습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"useQuery<AxiosResponse, AxiosError, AxiosResponse, string[]>(\\n\\t['keyName'], //queryKey\\n\\t(): Promise<any> => API() //queryFn\\n\\t{\\n\\t\\t\\toptions, //options\\n\\t}\\n)\\n\")), \"\\n\", React.createElement(_components.p, null, \"해당 형태로 사용해도 무방하지만, Hook이나 Service 형식으로 분리해서 사용하는 것이 깔끔합니다.\"), \"\\n\", React.createElement(_components.h3, null, \"(2) \", React.createElement(_components.strong, null, \"useQuery의 데이터 갱신\")), \"\\n\", React.createElement(_components.p, null, \"다음은 데이터 갱신입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQuery는 데이터 갱신의 방법도 다양하고 역할도 서로 달라 따로 설명할 필요성을 느꼈습니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQuery는 기본적으로 호출되는 순간, 한번 쿼리를 실행합니다.\"), \"\\n\", React.createElement(_components.p, null, \"다시 말해 데이터를 갱신하여 화면에 반영하기 위해서는 쿼리의 요청이 필요합니다.\"), \"\\n\", React.createElement(_components.p, null, \"방법은 크게 세가지로 나눠집니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"refetchInterval\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"...\\n\\t{\\n\\t\\t\\trefetchInterval: 500 //500ms마다 요청\\n\\n\\t}, //options\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"쿼리가 일정 주기마다 실행되도록하는 \", React.createElement(_components.code, null, \"refechInterval\"), \" 옵션을 사용합니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"setInterval\"), \"과 \", React.createElement(_components.code, null, \"refetch\"), \" 함수를 합쳐놓은 느낌이죠.\"), \"\\n\", React.createElement(_components.p, null, \"지속적인 요청과 갱신이 필요할 때 효과적입니다.\"), \"\\n\", React.createElement(_components.p, null, \"단점으로는 사용자가 임의로 갱신 시점을 조정할 수 없고,\"), \"\\n\", React.createElement(_components.p, null, \"계속해서 서버에 요청을 날리기에 효율적이지도 않습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"refetch\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const {refetch} =\\nuseQuery<AxiosResponse, AxiosError, AxiosResponse, string[]>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"일정 간격으로 update를 하지 않고 특정 사용자 액션에 대한 응답으로 쿼리 결과를 갱신합니다. 사용자가 원하는 타이밍에 갱신 가능합니다.\"), \"\\n\", React.createElement(_components.p, null, \"단점으로는 데이터를 변형할 때 그것을 위한  코드가 선행되어야 합니다. 하지만  update 반영도 제대로되지 않을 뿐더러 코드가 아래와 같은 형태가 되어버려 보기에도 좋지 않습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"갱신();\\nrefetch();\\n\")), \"\\n\", React.createElement(_components.p, null, \"근본적으로 refetching 작업에 대해 명령형으로 실행하고자 하는건 잘못된 방법이기에,\"), \"\\n\", React.createElement(_components.p, null, \"다음에 나올 방법과 같이 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"uniqueKey\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const [queryString, setQueryString] = useState<string>('');\\n\\nuseQuery<AxiosResponse, AxiosError, AxiosResponse, string[]>(\\n\\t['keyName', queryString], //queryKey\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"앞서 말한대로 unique Key는 계층 구조입니다.\"), \"\\n\", React.createElement(_components.p, null, \"또한 useQuery는 Key가 변경 될 때 마다 트리거 되어 자동으로 \", React.createElement(_components.code, null, \"refetching\"), \"하기 때문에,\"), \"\\n\", React.createElement(_components.p, null, \"데이터를 변경하는 state를 key에 저장하기만 하면 됩니다. 모범적인 사용법이라 할 수 있죠.\"), \"\\n\", React.createElement(_components.p, null, \"그렇다곤 해도 데이터를 변형하지 않으면서 갱신해야 하는 경우도 있기 때문에,\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"refetch\"), \"와 같이 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.p, null, \"마지막으로 아까 말했듯 useQuery는 조회에 사용되는 경우가 많기 때문에,\"), \"\\n\", React.createElement(_components.p, null, \"대체로 queryString으로 queryKey를 구성하는 편입니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"결론\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"데이터가 변형되는 경우에는 uniqueKey에 등록해놓은 state를 변경하고,\"), \"\\n\", React.createElement(_components.p, null, \"변형되지 않는 경우에는 \", React.createElement(_components.code, null, \"refetch\"), \"를 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"2. useMutation\"), \"\\n\", React.createElement(_components.p, null, \"useMutation은 주로 추가/삭제/수정 요청에 주로 사용됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"물론 useQuery에는 무조건 get method를 사용하고\"), \"\\n\", React.createElement(_components.p, null, \"useMutation에는 post/put/delete method를 사용하는 것은 아니지만\"), \"\\n\", React.createElement(_components.p, null, \"대체로 useMutation은 bodyData를 필요로 할때가 많고,\"), \"\\n\", React.createElement(_components.p, null, \"반대로 queryString을 사용하는 경우가 적기 때문에,\"), \"\\n\", React.createElement(_components.p, null, \"그에 따른 타입과 사용법이 조금씩 다릅니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"(1) useMutaion\", React.createElement(_components.strong, null, \"의 Type\")), \"\\n\", React.createElement(_components.p, null, \"useMutaion의 타입은 아래와 같이 선언되어 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"export function useMutaion<\\n  TData = unknown,\\n  TError = unknown,\\n  TVariables = void,\\n  TContext = unknown\\n>\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TData\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { data } =\\nuseMutaion<AxiosResponse<결과타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"useMuation에 넘겨준 mutation 함수의  반환 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useMuation에는 TQueryFnData이 없기 때문에 TData가 실행 결과 타입이자, 실질적인 반환 타입이 되는 것이죠.\"), \"\\n\", React.createElement(_components.p, null, \"useQeury의 TQueryFuntion와 유사한 부분이 많기 때문에, 자세한 설명은 생략하겠습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TError\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { error } =\\nuseMutation<AxiosResponse<결과타입>, AxiosError<에러타입>>(\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"useMutation에 넘겨준 mutation 함수의 에러 결과 타입을 명시적으로 지정해주는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"useQeury의 TError와 유사한 부분이 많기 때문에 자세한 설명은 생략하겠습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"TVariables\")), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { mutate } =\\nuseMutation<AxiosResponse<결과타입>, AxiosError<에러타입>, bodyType>(\\n...\\n\\t(bodyData: bodyType): Promise<any> => API(), //mutationFn\\n\\t{   //options\\n\\n\\t\\t\\tonSuccess: (res, bodyData: bodyType) => {},\\n\\t\\t  onError: (err, bodyData: bodyType) => {},\\n\\t\\t  onSettled: (res, err, bodyData: bodyType) => {},\\n\\t},\\n);\\n\\nmutate(bodyData);\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"mutate\"), \" 함수에 전달할 인자를 지정하는 generic 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"쉽게 말해 bodyData에 해당한다고 할 수 있죠.\"), \"\\n\", React.createElement(_components.p, null, \"해당 타입은 \", React.createElement(_components.code, null, \"mutate\"), \"와 Callback 함수인, \", React.createElement(_components.code, null, \"onSuccess\"), \", \", React.createElement(_components.code, null, \"onError\"), \"의 두번째 인자\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"onSettled\"), \"의 세번째 인자로 사용 할 수 있습니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"TContext\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const { mutate } =\\nuseMutation<AxiosResponse, AxiosError, bodyType, callbackType>(\\n...\\n\\t{   //options\\n\\n\\t\\t\\tonMutate: bodyData => something(bodyData),   //callbackType\\n\\n\\t\\t\\tonSuccess: (res, bodyData, callbackType) => {},\\n\\t\\t  onError: (err, bodyData, callbackType) => {},\\n\\t\\t  onSettled: (res, err, bodyData, callbackType) => {},\\n\\t},\\n);\\n\")), \"\\n\", React.createElement(_components.p, null, \"TContext는 앞서 말했던 callback 함수들의 마지막 인자의 타입이자,\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"onMutate\"), \"의 결과 값의 타입을 지정하는 제네릭 타입입니다.\"), \"\\n\", React.createElement(_components.p, null, \"솔직히 해당 타입은 저도 제대로 사용해본 적이 적어 어떤 용도로 사용되는지는 정확히 알지 못합니다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"설명을 바탕으로 작성한  TypeScript에서 useMutation의 기본적인 사용법은 다음과 같습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"useMutation<AxiosResponse, AxiosError, bodyType, callbackType>(\\n\\t['keyName'], //mutationKey\\n\\t(bodyData: bodyType): Promise<any> => API() //mutationFn\\n\\t{\\n\\t\\t\\tonMutate: bodyData => something(bodyData),   //callbackType\\n\\n\\t\\t\\tonSuccess: (res, bodyData, callbackType) => {},\\n\\t\\t  onError: (err, bodyData, callbackType) => {},\\n\\t\\t  onSettled: (res, err, bodyData, callbackType) => {},\\n\\t}, //options\\n),\\n\")), \"\\n\", React.createElement(_components.p, null, \"또한 데이터 갱신에 대해 첨언하자면 useMutation도 마찬가지로 queryKey를 통한 데이터 갱신이 가능하지만,\"), \"\\n\", React.createElement(_components.p, null, \"기본적으로  mutate를 통해 쿼리를 호출하는 것이 바람직 하다고 볼 수 있습니다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"3.  Axios + ReactQuery + TypeScript의 JWT 토큰 관리\"), \"\\n\", React.createElement(_components.p, null, \"다른 상태관리 라이브러리에서 React Query로 넘어오신 분들은 JWT 토큰을 관리할 때 대체로 Axios가 제공하는 interceptors를 활용하였을 것입니다.\"), \"\\n\", React.createElement(_components.p, null, \"대략적인 형태는 다음과 같습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"axiosInstance.interceptors.request.use(\\n    function (config) {\\n        const headers = {\\n            ...config.headers,\\n            Authorization: 'Bearer ' + accessToken,\\n        };\\n\\n        config.headers = headers;\\n        return config;\\n    },\\n);\\n\\naxiosInstance.interceptors.response.use(\\n    (response) => {\\n        return response;\\n    },\\n    async error => {\\n        const originalRequest = {...error.config, noRepeat: true};\\n\\n        if ( 인증오류 && error.config.noRepeat !== true) {\\n            await axiosReissue()\\n                .then(response) => {\\n                        if (response.status === 200) {\\n                            return axiosInstance(originalRequest);\\n                        }\\n                    }\\n                )\\n        }\\n\\n        return Promise.reject(error);\\n\\n    },\\n);\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"저는 조금 간단하게 쓴편이지만 구조는 비슷하리라 생각됩니다. 실제로 잘 작동하기도 하고요.\"), \"\\n\", React.createElement(_components.p, null, \"어쩌면 React Query에서도 문제없이는게 아닌가? 생각하실수도 있겠지만\"), \"\\n\", React.createElement(_components.p, null, \"React Query를 사용하시는 분들중 이전에 Redux를 사용하다 전환하신 분들이라면,\"), \"\\n\", React.createElement(_components.p, null, \"Axios가 제공하는\"), \"\\n\", React.createElement(_components.h2, null, \"결론\"), \"\\n\", React.createElement(_components.p, null, \"reat-query는 타입 지정을 통해서 꽤나 안정적으로 사용할 수 있었습니다.\"), \"\\n\", React.createElement(_components.p, null, \"타입 가드를 도입하기 보다는 이처럼 빡빡한 타입 지정을 해두는 것이,\"), \"\\n\", React.createElement(_components.p, null, \"더 비동기 상태들의 타입 안정성을 확보하는데 도움이 될 수 있지 않을까 싶네요\"), \"\\n\", React.createElement(_components.p, null, \"참고\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"react-query에 typescript 적용하기 - 리액트 쿼리,타입스크립트\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://gusrb3164.github.io/web/2022/01/23/react-query-typescript/\"\n  }, \"https://gusrb3164.github.io/web/2022/01/23/react-query-typescript/\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"React Query Key 관리\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.zigae.com/react-query-key/\"\n  }, \"https://www.zigae.com/react-query-key/\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jh/Desktop/private-project/gitBlog/content/posts/2024-11-13.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {components} from \"../components/shortcodes\";\nimport CodeBlock from \"./components/CodeBlock\";\nconst PostsTemplate = ({data, children}) => {\n  return React.createElement(\"div\", {\n    className: \"flex flex-col items-center pt-5\"\n  }, React.createElement(\"div\", {\n    className: \"max-w-[960px] prose\"\n  }, React.createElement(MDXProvider, {\n    components: {\n      ...components,\n      pre: CodeBlock\n    }\n  }, children)));\n};\nPostsTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostsTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_ref","src","React","alt","className","withPrefix","_createMdxContent","props","_components","Object","assign","h1","p","strong","h2","hr","h3","pre","code","ol","li","a","_provideComponents","components","PostImage","href","wrapper","MDXLayout","PostsTemplate","data","children","MDXProvider","CodeBlock","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref2","mdx","frontmatter","title"],"sourceRoot":""}